import { NextResponse } from "next/server"
import { cookies } from "next/headers"

export const dynamic = "force-dynamic"

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
export async function POST() {
  try {
    const cookieStore = cookies()
    const refreshToken = cookieStore.get("google_refresh_token")?.value
    const sessionMeta = cookieStore.get("oauth_session_meta")?.value

    if (!refreshToken) {
      return NextResponse.json(
        {
          error: "Refresh token –Ω–µ –Ω–∞–π–¥–µ–Ω",
          action: "reauth_required",
        },
        { status: 401 },
      )
    }

    console.log("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Google Access Token")

    const response = await fetch("https://oauth2.googleapis.com/token", {
      method: "POST",
      headers: { "Content-Type": "application/x-www-form-urlencoded" },
      body: new URLSearchParams({
        client_id: process.env.GOOGLE_CLIENT_ID!,
        client_secret: process.env.GOOGLE_CLIENT_SECRET!,
        refresh_token: refreshToken,
        grant_type: "refresh_token",
      }),
    })

    if (!response.ok) {
      const errorData = await response.text()
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:", errorData)

      // –ï—Å–ª–∏ refresh token –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
      if (response.status === 400) {
        // –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–æ–∫–µ–Ω—ã
        cookieStore.delete("google_access_token")
        cookieStore.delete("google_refresh_token")
        cookieStore.delete("google_user_info")
        cookieStore.delete("oauth_session_meta")

        return NextResponse.json(
          {
            error: "Refresh token –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω",
            action: "reauth_required",
          },
          { status: 401 },
        )
      }

      return NextResponse.json(
        {
          error: "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞",
          details: errorData,
        },
        { status: 500 },
      )
    }

    const tokens = await response.json()
    const isProduction = process.env.NODE_ENV === "production"

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π access token
    cookieStore.set("google_access_token", tokens.access_token, {
      httpOnly: true,
      secure: isProduction,
      maxAge: tokens.expires_in || 3600,
      path: "/",
      sameSite: "lax",
    })

    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
    const currentMeta = sessionMeta ? JSON.parse(sessionMeta) : {}
    cookieStore.set(
      "oauth_session_meta",
      JSON.stringify({
        ...currentMeta,
        lastRefresh: new Date().toISOString(),
        expiresAt: new Date(Date.now() + tokens.expires_in * 1000).toISOString(),
      }),
      {
        httpOnly: true,
        secure: isProduction,
        maxAge: 60 * 60 * 24,
        path: "/",
        sameSite: "lax",
      },
    )

    console.log("‚úÖ Access token —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")

    return NextResponse.json({
      success: true,
      message: "–¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω",
      expires_in: tokens.expires_in,
      refreshed_at: new Date().toISOString(),
    })
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:", error)
    return NextResponse.json(
      {
        error: "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞",
        details: error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
      },
      { status: 500 },
    )
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ–∫–µ–Ω–∞
export async function GET() {
  try {
    const cookieStore = cookies()
    const accessToken = cookieStore.get("google_access_token")?.value
    const sessionMeta = cookieStore.get("oauth_session_meta")?.value
    const userInfo = cookieStore.get("google_user_info")?.value

    if (!accessToken) {
      return NextResponse.json({
        connected: false,
        message: "–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
      })
    }

    const meta = sessionMeta ? JSON.parse(sessionMeta) : {}
    const user = userInfo ? JSON.parse(userInfo) : null

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Ç–æ–∫–µ–Ω
    const expiresAt = meta.expiresAt ? new Date(meta.expiresAt) : null
    const isExpired = expiresAt ? expiresAt.getTime() < Date.now() : false

    return NextResponse.json({
      connected: true,
      user,
      session: {
        ...meta,
        isExpired,
        timeToExpiry: expiresAt ? Math.max(0, expiresAt.getTime() - Date.now()) : 0,
      },
    })
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:", error)
    return NextResponse.json(
      {
        connected: false,
        error: "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞",
      },
      { status: 500 },
    )
  }
}
