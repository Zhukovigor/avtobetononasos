import { NextResponse } from "next/server"
import { cookies } from "next/headers"

export const dynamic = "force-dynamic"
export const runtime = "nodejs"

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google
export async function GET() {
  try {
    console.log("üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Google OAuth")

    const cookieStore = cookies()
    const accessToken = cookieStore.get("google_access_token")?.value
    const refreshToken = cookieStore.get("google_refresh_token")?.value
    const userInfoCookie = cookieStore.get("google_user_info")?.value
    const sessionInfoCookie = cookieStore.get("google_session_info")?.value

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö cookies
    if (!accessToken || !userInfoCookie || !sessionInfoCookie) {
      console.log("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ cookies")
      return NextResponse.json({
        connected: false,
        message: "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google",
        debug: {
          hasAccessToken: !!accessToken,
          hasRefreshToken: !!refreshToken,
          hasUserInfo: !!userInfoCookie,
        },
      })
    }

    // –ü–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ —Å–µ—Å—Å–∏–∏
    let userInfo
    let sessionInfo

    try {
      userInfo = JSON.parse(userInfoCookie)
      sessionInfo = JSON.parse(sessionInfoCookie)
    } catch (e) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ cookies:", e)
      return NextResponse.json({
        connected: false,
        error: "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏",
        debug: {
          hasAccessToken: !!accessToken,
          hasRefreshToken: !!refreshToken,
          hasUserInfo: !!userInfoCookie,
        },
      })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
    let tokenValid = false
    let tokenStatus = null

    try {
      const tokenCheckResponse = await fetch("https://www.googleapis.com/oauth2/v1/tokeninfo", {
        method: "GET",
        headers: {
          Authorization: `Bearer ${accessToken}`,
        },
      })

      tokenStatus = tokenCheckResponse.status
      tokenValid = tokenCheckResponse.ok

      if (!tokenValid && refreshToken) {
        console.log("üîÑ –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –Ω–æ –µ—Å—Ç—å refresh token")
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
      }
    } catch (e) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:", e)
    }

    // –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
    const now = new Date()
    const expiresAt = new Date(sessionInfo.expiresAt)
    const isExpired = now > expiresAt
    const timeToExpiry = Math.max(0, expiresAt.getTime() - now.getTime())

    console.log("‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω")

    return NextResponse.json({
      connected: true,
      user: userInfo,
      session: {
        ...sessionInfo,
        isExpired,
        timeToExpiry,
      },
      debug: {
        hasAccessToken: !!accessToken,
        hasRefreshToken: !!refreshToken,
        hasUserInfo: !!userInfoCookie,
        tokenValid,
        tokenStatus,
      },
    })
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:", error)
    return NextResponse.json({
      connected: false,
      error: "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
      message: error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
    })
  }
}
