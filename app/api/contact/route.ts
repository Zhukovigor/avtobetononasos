import { type NextRequest, NextResponse } from "next/server"
import nodemailer from "nodemailer"

export async function POST(request: NextRequest) {
  try {
    const { name, email, phone, message } = await request.json()

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!name || !email || !phone || !message) {
      return NextResponse.json({ success: false, message: "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è" }, { status: 400 })
    }

    // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
    if (!emailRegex.test(email)) {
      return NextResponse.json({ success: false, message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å" }, { status: 400 })
    }

    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email —á–µ—Ä–µ–∑ Mail.ru
    const transporter = nodemailer.createTransport({
      host: "smtp.mail.ru",
      port: 465,
      secure: true,
      auth: {
        user: "zhukovigor@mail.ru",
        pass: "rKLK7KtnEU50Ucfqoslx",
      },
      tls: {
        rejectUnauthorized: false,
      },
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    await transporter.verify()

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∏—Å—å–º–∞
    const mailOptions = {
      from: '"–°–∞–π—Ç –ê–≤—Ç–æ–±–µ—Ç–æ–Ω–æ–Ω–∞—Å–æ—Å—ã" <zhukovigor@mail.ru>',
      to: "zhukovigor@mail.ru",
      subject: `üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ –∞–≤—Ç–æ–±–µ—Ç–æ–Ω–æ–Ω–∞—Å–æ—Å–æ–≤ SANY`,
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; background: #f9f9f9; padding: 20px;">
          <div style="background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
            <h2 style="color: #333; border-bottom: 3px solid #007bff; padding-bottom: 15px; margin-top: 0;">
              üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞
            </h2>
            
            <div style="background: #f8f9fa; padding: 20px; margin: 20px 0; border-radius: 8px; border-left: 4px solid #007bff;">
              <h3 style="margin-top: 0; color: #333; font-size: 18px;">üë§ –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</h3>
              <table style="width: 100%; border-collapse: collapse;">
                <tr>
                  <td style="padding: 8px 0; font-weight: bold; color: #555; width: 100px;">–ò–º—è:</td>
                  <td style="padding: 8px 0; color: #333;">${name}</td>
                </tr>
                <tr>
                  <td style="padding: 8px 0; font-weight: bold; color: #555;">Email:</td>
                  <td style="padding: 8px 0; color: #333;"><a href="mailto:${email}" style="color: #007bff; text-decoration: none;">${email}</a></td>
                </tr>
                <tr>
                  <td style="padding: 8px 0; font-weight: bold; color: #555;">–¢–µ–ª–µ—Ñ–æ–Ω:</td>
                  <td style="padding: 8px 0; color: #333;"><a href="tel:${phone}" style="color: #007bff; text-decoration: none;">${phone}</a></td>
                </tr>
              </table>
            </div>
            
            <div style="background: #fff; padding: 20px; border: 2px solid #e9ecef; border-radius: 8px; margin: 20px 0;">
              <h3 style="margin-top: 0; color: #333; font-size: 18px;">üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:</h3>
              <p style="line-height: 1.6; color: #555; margin: 0; white-space: pre-wrap;">${message}</p>
            </div>
            
            <div style="background: #e8f4f8; padding: 20px; border-radius: 8px; margin-top: 30px;">
              <h3 style="margin-top: 0; color: #333; font-size: 16px;">üöÄ –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</h3>
              <div style="display: flex; gap: 10px; flex-wrap: wrap;">
                <a href="https://wa.me/${phone.replace(/\D/g, "")}" 
                   style="background: #25D366; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px; display: inline-block; margin: 5px 0;">
                  üì± WhatsApp
                </a>
                <a href="mailto:${email}" 
                   style="background: #007bff; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px; display: inline-block; margin: 5px 0;">
                  üìß –û—Ç–≤–µ—Ç–∏—Ç—å
                </a>
                <a href="tel:${phone}" 
                   style="background: #28a745; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px; display: inline-block; margin: 5px 0;">
                  üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å
                </a>
              </div>
            </div>
            
            <div style="margin-top: 30px; padding: 15px; background: #f8f9fa; border-radius: 5px; border-top: 3px solid #007bff;">
              <p style="margin: 0; font-size: 14px; color: #666; text-align: center;">
                üìÖ <strong>–î–∞—Ç–∞:</strong> ${new Date().toLocaleString("ru-RU")}<br>
                üåê <strong>–°–∞–π—Ç:</strong> v0-avtobetononasos.vercel.app<br>
                ‚ö° <strong>–°—Ç–∞—Ç—É—Å:</strong> –¢—Ä–µ–±—É–µ—Ç –æ—Ç–≤–µ—Ç–∞
              </p>
            </div>
          </div>
        </div>
      `,
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
    const info = await transporter.sendMail(mailOptions)
    console.log("‚úÖ Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ:", info.messageId)

    return NextResponse.json(
      {
        success: true,
        message: "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
      },
      { status: 200 },
    )
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:", error)

    // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ
    let errorMessage = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏."

    if (error instanceof Error) {
      if (error.message.includes("authentication")) {
        errorMessage = "–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ email. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é."
      } else if (error.message.includes("connection")) {
        errorMessage = "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
      } else {
        errorMessage = `–û—à–∏–±–∫–∞: ${error.message}`
      }
    }

    return NextResponse.json(
      {
        success: false,
        message: errorMessage,
      },
      { status: 500 },
    )
  }
}
