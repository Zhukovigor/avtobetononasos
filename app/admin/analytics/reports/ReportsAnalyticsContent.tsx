"use client"

import { useState, useEffect } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Alert, AlertDescription } from "@/components/ui/alert"
import {
  FileText,
  Download,
  Calendar,
  TrendingUp,
  BarChart3,
  PieChart,
  RefreshCw,
  AlertTriangle,
  Clock,
  Mail,
} from "lucide-react"

interface ReportData {
  scheduled: Array<{
    name: string
    frequency: string
    lastSent: string
    nextSend: string
    recipients: number
    status: "active" | "paused"
  }>
  available: Array<{
    name: string
    description: string
    type: "analytics" | "seo" | "traffic" | "conversions"
    lastGenerated: string
    size: string
  }>
}

export default function ReportsAnalyticsContent() {
  const [data, setData] = useState<ReportData | null>(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [refreshing, setRefreshing] = useState(false)

  useEffect(() => {
    fetchReportsData()
  }, [])

  const fetchReportsData = async () => {
    try {
      setLoading(true)
      setError(null)

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–æ–≤
      const response = await fetch("/api/reports-data")
      const result = await response.json()

      if (result.success) {
        setData(result.data)
      } else {
        setError(result.error || "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤")
      }
    } catch (err) {
      setError("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API")
    } finally {
      setLoading(false)
    }
  }

  const handleRefresh = async () => {
    setRefreshing(true)
    await fetchReportsData()
    setRefreshing(false)
  }

  const handleDownloadReport = async (reportType: string) => {
    try {
      const response = await fetch(`/api/reports/generate?type=${reportType}`)
      const blob = await response.blob()
      const url = window.URL.createObjectURL(blob)
      const a = document.createElement("a")
      a.href = url
      a.download = `${reportType}-report-${new Date().toISOString().split("T")[0]}.pdf`
      document.body.appendChild(a)
      a.click()
      window.URL.revokeObjectURL(url)
      document.body.removeChild(a)
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞:", err)
    }
  }

  if (loading) {
    return (
      <div className="space-y-6">
        <div className="flex items-center justify-between">
          <h1 className="text-3xl font-bold text-white">üìä –û—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</h1>
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-white"></div>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {[...Array(4)].map((_, i) => (
            <Card key={i} className="bg-gray-800 border-gray-700 animate-pulse">
              <CardContent className="p-6">
                <div className="h-4 bg-gray-700 rounded mb-4"></div>
                <div className="space-y-2">
                  {[...Array(5)].map((_, j) => (
                    <div key={j} className="h-3 bg-gray-700 rounded"></div>
                  ))}
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
    )
  }

  // –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
  const mockData: ReportData = {
    scheduled: [
      {
        name: "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Ç—Ä–∞—Ñ–∏–∫—É",
        frequency: "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ",
        lastSent: "2024-01-08",
        nextSend: "2024-01-15",
        recipients: 3,
        status: "active",
      },
      {
        name: "–ú–µ—Å—è—á–Ω—ã–π SEO –æ—Ç—á–µ—Ç",
        frequency: "–ï–∂–µ–º–µ—Å—è—á–Ω–æ",
        lastSent: "2024-01-01",
        nextSend: "2024-02-01",
        recipients: 5,
        status: "active",
      },
      {
        name: "–û—Ç—á–µ—Ç –ø–æ –∫–æ–Ω–≤–µ—Ä—Å–∏—è–º",
        frequency: "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ",
        lastSent: "2024-01-08",
        nextSend: "2024-01-09",
        recipients: 2,
        status: "paused",
      },
    ],
    available: [
      {
        name: "–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç",
        description: "–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫ —Å–∞–π—Ç–∞ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥",
        type: "analytics",
        lastGenerated: "2024-01-08",
        size: "2.4 MB",
      },
      {
        name: "SEO –∞—É–¥–∏—Ç –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
        description: "–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ SEO –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∏ –ø–ª–∞–Ω —É–ª—É—á—à–µ–Ω–∏–π",
        type: "seo",
        lastGenerated: "2024-01-07",
        size: "1.8 MB",
      },
      {
        name: "–ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Ç—Ä–∞—Ñ–∏–∫–∞",
        description: "–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –∫–∞–Ω–∞–ª–∞–º –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è",
        type: "traffic",
        lastGenerated: "2024-01-08",
        size: "1.2 MB",
      },
      {
        name: "–û—Ç—á–µ—Ç –ø–æ –∫–æ–Ω–≤–µ—Ä—Å–∏—è–º",
        description: "–ê–Ω–∞–ª–∏–∑ –≤–æ—Ä–æ–Ω–∫–∏ –ø—Ä–æ–¥–∞–∂ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ü–µ–ª–µ–π",
        type: "conversions",
        lastGenerated: "2024-01-08",
        size: "0.9 MB",
      },
    ],
  }

  const getTypeIcon = (type: string) => {
    switch (type) {
      case "analytics":
        return BarChart3
      case "seo":
        return TrendingUp
      case "traffic":
        return PieChart
      case "conversions":
        return TrendingUp
      default:
        return FileText
    }
  }

  const getTypeColor = (type: string) => {
    switch (type) {
      case "analytics":
        return "bg-blue-600"
      case "seo":
        return "bg-green-600"
      case "traffic":
        return "bg-purple-600"
      case "conversions":
        return "bg-orange-600"
      default:
        return "bg-gray-600"
    }
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-white">üìä –û—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</h1>
          <p className="text-gray-400 mt-2">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã –∏ —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö</p>
        </div>
        <div className="flex items-center gap-4">
          <Button
            onClick={handleRefresh}
            disabled={refreshing}
            variant="outline"
            className="border-blue-600 text-blue-400 hover:bg-blue-600"
          >
            <RefreshCw className={`w-4 h-4 mr-2 ${refreshing ? "animate-spin" : ""}`} />
            –û–±–Ω–æ–≤–∏—Ç—å
          </Button>
        </div>
      </div>

      {error && (
        <Alert className="bg-red-900/20 border-red-800">
          <AlertTriangle className="h-4 w-4" />
          <AlertDescription className="text-red-300">{error}</AlertDescription>
        </Alert>
      )}

      {/* Scheduled Reports */}
      <Card className="bg-gray-800 border-gray-700">
        <CardHeader>
          <CardTitle className="text-white flex items-center gap-2">
            <Calendar className="w-5 h-5" />
            –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {mockData.scheduled.map((report, index) => (
              <div key={index} className="flex items-center justify-between p-4 bg-gray-700 rounded-lg">
                <div className="flex items-center gap-4">
                  <Mail className="w-6 h-6 text-blue-400" />
                  <div>
                    <p className="text-white font-medium">{report.name}</p>
                    <p className="text-gray-400 text-sm">
                      {report.frequency} ‚Ä¢ {report.recipients} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
                    </p>
                  </div>
                </div>
                <div className="flex items-center gap-4">
                  <div className="text-right">
                    <p className="text-gray-300 text-sm">–ü–æ—Å–ª–µ–¥–Ω–∏–π: {report.lastSent}</p>
                    <p className="text-gray-400 text-xs">–°–ª–µ–¥—É—é—â–∏–π: {report.nextSend}</p>
                  </div>
                  <Badge className={report.status === "active" ? "bg-green-600" : "bg-yellow-600"}>
                    {report.status === "active" ? "–ê–∫—Ç–∏–≤–µ–Ω" : "–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}
                  </Badge>
                  <Button size="sm" variant="outline" className="border-gray-600 text-gray-300">
                    –ù–∞—Å—Ç—Ä–æ–∏—Ç—å
                  </Button>
                </div>
              </div>
            ))}
          </div>
          <div className="mt-6 pt-4 border-t border-gray-700">
            <Button className="bg-blue-600 hover:bg-blue-700">
              <Calendar className="w-4 h-4 mr-2" />
              –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –æ—Ç—á–µ—Ç
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* Available Reports */}
      <Card className="bg-gray-800 border-gray-700">
        <CardHeader>
          <CardTitle className="text-white flex items-center gap-2">
            <FileText className="w-5 h-5" />
            –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid md:grid-cols-2 gap-4">
            {mockData.available.map((report, index) => {
              const Icon = getTypeIcon(report.type)
              return (
                <div key={index} className="p-4 bg-gray-700 rounded-lg">
                  <div className="flex items-start gap-4">
                    <div className={`p-2 rounded-lg ${getTypeColor(report.type)}`}>
                      <Icon className="w-6 h-6 text-white" />
                    </div>
                    <div className="flex-1">
                      <h3 className="text-white font-medium mb-1">{report.name}</h3>
                      <p className="text-gray-400 text-sm mb-3">{report.description}</p>
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-4 text-xs text-gray-500">
                          <span className="flex items-center gap-1">
                            <Clock className="w-3 h-3" />
                            {report.lastGenerated}
                          </span>
                          <span>{report.size}</span>
                        </div>
                        <Button
                          size="sm"
                          onClick={() => handleDownloadReport(report.type)}
                          className="bg-blue-600 hover:bg-blue-700"
                        >
                          <Download className="w-4 h-4 mr-1" />
                          –°–∫–∞—á–∞—Ç—å
                        </Button>
                      </div>
                    </div>
                  </div>
                </div>
              )
            })}
          </div>
        </CardContent>
      </Card>

      {/* Quick Actions */}
      <div className="grid md:grid-cols-3 gap-6">
        <Card className="bg-blue-900/20 border-blue-800">
          <CardContent className="p-6 text-center">
            <BarChart3 className="w-12 h-12 text-blue-400 mx-auto mb-4" />
            <h3 className="text-white font-medium mb-2">–°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç</h3>
            <p className="text-gray-400 text-sm mb-4">–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –æ—Ç—á–µ—Ç —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏</p>
            <Button className="bg-blue-600 hover:bg-blue-700 w-full">–°–æ–∑–¥–∞—Ç—å</Button>
          </CardContent>
        </Card>

        <Card className="bg-green-900/20 border-green-800">
          <CardContent className="p-6 text-center">
            <Calendar className="w-12 h-12 text-green-400 mx-auto mb-4" />
            <h3 className="text-white font-medium mb-2">–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ</h3>
            <p className="text-gray-400 text-sm mb-4">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é</p>
            <Button className="bg-green-600 hover:bg-green-700 w-full">–ù–∞—Å—Ç—Ä–æ–∏—Ç—å</Button>
          </CardContent>
        </Card>

        <Card className="bg-purple-900/20 border-purple-800">
          <CardContent className="p-6 text-center">
            <Download className="w-12 h-12 text-purple-400 mx-auto mb-4" />
            <h3 className="text-white font-medium mb-2">–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö</h3>
            <p className="text-gray-400 text-sm mb-4">–í—ã–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö</p>
            <Button className="bg-purple-600 hover:bg-purple-700 w-full">–≠–∫—Å–ø–æ—Ä—Ç</Button>
          </CardContent>
        </Card>
      </div>

      {/* Report Templates */}
      <Card className="bg-gray-800 border-gray-700">
        <CardHeader>
          <CardTitle className="text-white flex items-center gap-2">
            <FileText className="w-5 h-5" />
            –®–∞–±–ª–æ–Ω—ã –æ—Ç—á–µ—Ç–æ–≤
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-4">
            <div className="p-4 bg-gray-700 rounded-lg border-2 border-dashed border-gray-600 hover:border-blue-500 transition-colors cursor-pointer">
              <div className="text-center">
                <FileText className="w-8 h-8 text-gray-400 mx-auto mb-2" />
                <p className="text-gray-300 text-sm">–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω</p>
              </div>
            </div>

            <div className="p-4 bg-gray-700 rounded-lg">
              <div className="text-center">
                <BarChart3 className="w-8 h-8 text-blue-400 mx-auto mb-2" />
                <p className="text-white text-sm font-medium">–ë–∞–∑–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</p>
                <p className="text-gray-400 text-xs">–û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏</p>
              </div>
            </div>

            <div className="p-4 bg-gray-700 rounded-lg">
              <div className="text-center">
                <TrendingUp className="w-8 h-8 text-green-400 mx-auto mb-2" />
                <p className="text-white text-sm font-medium">SEO –æ—Ç—á–µ—Ç</p>
                <p className="text-gray-400 text-xs">–ü–æ–∑–∏—Ü–∏–∏ –∏ —Ç—Ä–∞—Ñ–∏–∫</p>
              </div>
            </div>

            <div className="p-4 bg-gray-700 rounded-lg">
              <div className="text-center">
                <PieChart className="w-8 h-8 text-purple-400 mx-auto mb-2" />
                <p className="text-white text-sm font-medium">–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑</p>
                <p className="text-gray-400 text-xs">–ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</p>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}
