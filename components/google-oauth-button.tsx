"use client"

import { useState, useEffect } from "react"
import { Button } from "./ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "./ui/card"
import { Badge } from "./ui/badge"
import { Alert, AlertDescription, AlertTitle } from "./ui/alert"
import { ExclamationTriangleIcon } from "@radix-ui/react-icons"

interface GoogleOAuthButtonProps {
  onConnectionChange?: (connected: boolean) => void
}

export default function GoogleOAuthButton({ onConnectionChange }: GoogleOAuthButtonProps) {
  const [isConnected, setIsConnected] = useState(false)
  const [userInfo, setUserInfo] = useState<any>(null)
  const [isLoading, setIsLoading] = useState(false)
  const [connectionStatus, setConnectionStatus] = useState<string>("")
  const [error, setError] = useState<string>("")
  const [fetchError, setFetchError] = useState<boolean>(false)

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    checkConnectionStatus()
  }, [])

  const checkConnectionStatus = async () => {
    try {
      setIsLoading(true)
      const response = await fetch("/api/auth/google/status", {
        cache: "no-store",
        headers: {
          "Cache-Control": "no-cache",
          Pragma: "no-cache",
        },
      })
      const data = await response.json()

      setIsConnected(data.connected)
      setUserInfo(data.userInfo)
      setConnectionStatus(data.message || "")
      setError("")
      setFetchError(false)

      onConnectionChange?.(data.connected)
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:", error)
      setConnectionStatus("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
      setFetchError(true)
      setError(
        error instanceof Error ? error.message : "Failed to fetch: –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç–µ–≤—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∏–ª–∏ CORS-–æ—à–∏–±–∫–∞",
      )
    } finally {
      setIsLoading(false)
    }
  }

  const handleConnect = async () => {
    setIsLoading(true)
    setError("")
    setFetchError(false)

    try {
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      window.location.href = "/api/auth/google"
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:", error)
      setError(error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
      setFetchError(error instanceof Error && error.message.includes("fetch"))
      setIsLoading(false)
    }
  }

  const handleDisconnect = async () => {
    setIsLoading(true)
    setError("")
    setFetchError(false)

    try {
      const response = await fetch("/api/auth/google/disconnect", {
        method: "POST",
        cache: "no-store",
        headers: {
          "Cache-Control": "no-cache",
          Pragma: "no-cache",
        },
      })

      if (response.ok) {
        setIsConnected(false)
        setUserInfo(null)
        setConnectionStatus("–û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç Google Search Console")
        onConnectionChange?.(false)
      } else {
        const errorData = await response.json()
        throw new Error(errorData.error || "–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è")
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è:", error)
      setError(error instanceof Error ? error.message : "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏")
      setFetchError(error instanceof Error && error.message.includes("fetch"))
    } finally {
      setIsLoading(false)
    }
  }

  const refreshToken = async () => {
    setIsLoading(true)
    setError("")
    setFetchError(false)

    try {
      const response = await fetch("/api/auth/google/refresh", {
        method: "POST",
        cache: "no-store",
        headers: {
          "Cache-Control": "no-cache",
          Pragma: "no-cache",
        },
      })

      const data = await response.json()

      if (response.ok) {
        setConnectionStatus("–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
        await checkConnectionStatus()
      } else {
        throw new Error(data.error || "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞")
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:", error)
      setError(error instanceof Error ? error.message : "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞")
      setFetchError(error instanceof Error && error.message.includes("fetch"))
    } finally {
      setIsLoading(false)
    }
  }

  // –ü—Ä—è–º–æ–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–±–µ–∑ fetch)
  const directConnect = () => {
    window.location.href = "/api/auth/google"
  }

  return (
    <Card className="bg-zinc-900 border-zinc-800">
      <CardHeader>
        <CardTitle className="text-white flex items-center gap-2">
          üîç Google Search Console
          {isConnected ? (
            <Badge className="bg-green-600">–ü–æ–¥–∫–ª—é—á–µ–Ω–æ</Badge>
          ) : (
            <Badge className="bg-red-600">–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ</Badge>
          )}
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        {fetchError && (
          <Alert variant="destructive">
            <ExclamationTriangleIcon className="h-4 w-4" />
            <AlertTitle>–û—à–∏–±–∫–∞ "Failed to fetch"</AlertTitle>
            <AlertDescription>
              <div className="space-y-2 text-sm">
                <p>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</p>
                <ul className="list-disc list-inside space-y-1">
                  <li>–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç–µ–≤—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º</li>
                  <li>CORS-–æ—à–∏–±–∫–∏ (–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤)</li>
                  <li>–ë—Ä–∞—É–∑–µ—Ä–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä—É—é—Ç –∑–∞–ø—Ä–æ—Å—ã</li>
                </ul>
                <p className="font-medium">–†–µ—à–µ–Ω–∏—è:</p>
                <ul className="list-disc list-inside space-y-1">
                  <li>–û—Ç–∫–ª—é—á–∏—Ç–µ –±–ª–æ–∫–∏—Ä–æ–≤—â–∏–∫–∏ —Ä–µ–∫–ª–∞–º—ã –∏ CORS-—Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è</li>
                  <li>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –±—Ä–∞—É–∑–µ—Ä</li>
                  <li>
                    <Button variant="link" className="h-auto p-0 text-blue-400" onClick={directConnect}>
                      –ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å –¥–ª—è –ø—Ä—è–º–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
                    </Button>
                  </li>
                </ul>
              </div>
            </AlertDescription>
          </Alert>
        )}

        {error && !fetchError && (
          <div className="p-3 bg-red-900/50 border border-red-700 rounded-lg">
            <p className="text-red-200 text-sm font-medium">–û—à–∏–±–∫–∞:</p>
            <p className="text-red-300 text-sm">{error}</p>
            {error.includes("–ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è") && (
              <div className="mt-2 text-xs text-red-400">
                <p>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env.local:</p>
                <ul className="list-disc list-inside mt-1 space-y-1">
                  <li>GOOGLE_CLIENT_ID</li>
                  <li>GOOGLE_CLIENT_SECRET</li>
                  <li>GOOGLE_REDIRECT_URI</li>
                </ul>
              </div>
            )}
          </div>
        )}

        {isConnected && userInfo ? (
          <div className="space-y-3">
            <div className="flex items-center gap-3 p-3 bg-zinc-800 rounded-lg">
              {userInfo.picture && (
                <img src={userInfo.picture || "/placeholder.svg"} alt="Avatar" className="w-10 h-10 rounded-full" />
              )}
              <div>
                <p className="text-white font-medium">{userInfo.name}</p>
                <p className="text-gray-400 text-sm">{userInfo.email}</p>
              </div>
            </div>

            <div className="flex gap-2">
              <Button onClick={refreshToken} disabled={isLoading} variant="outline" size="sm">
                {isLoading ? "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ..." : "–û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω"}
              </Button>
              <Button onClick={handleDisconnect} disabled={isLoading} variant="destructive" size="sm">
                {isLoading ? "–û—Ç–∫–ª—é—á–µ–Ω–∏–µ..." : "–û—Ç–∫–ª—é—á–∏—Ç—å"}
              </Button>
            </div>
          </div>
        ) : (
          <div className="space-y-3">
            <p className="text-gray-400 text-sm">
              –ü–æ–¥–∫–ª—é—á–∏—Ç–µ Google Search Console –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–∑–∏—Ü–∏—è—Ö –≤–∞—à–µ–≥–æ —Å–∞–π—Ç–∞
            </p>
            <Button onClick={handleConnect} disabled={isLoading} className="w-full bg-blue-600 hover:bg-blue-700">
              {isLoading ? "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ..." : "üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å Google Search Console"}
            </Button>
            {fetchError && (
              <Button onClick={directConnect} disabled={isLoading} variant="outline" className="w-full border-blue-700">
                üîÑ –ü—Ä—è–º–æ–π –ø–µ—Ä–µ—Ö–æ–¥ (–æ–±—Ö–æ–¥ fetch)
              </Button>
            )}
          </div>
        )}

        {connectionStatus && !error && (
          <p className={`text-sm ${isConnected ? "text-green-400" : "text-gray-400"}`}>{connectionStatus}</p>
        )}

        <div className="text-xs text-gray-500 space-y-1">
          <p>‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è OAuth 2.0 –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</p>
          <p>‚Ä¢ –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö</p>
          <p>‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤</p>
        </div>
      </CardContent>
    </Card>
  )
}
